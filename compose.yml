services:
  backend:
    # Build the image from the Dockerfile in the current directory
    build: 
      context: ./backend
    # Host the FastAPI application on port 8000
    ports:
      - "8000:8000"
    # Interactive shell container
    stdin_open: true
    tty: true
    environment:
      - PYTHONUNBUFFERED=0
      - PYTHONPATH=/app
    depends_on:
      - app_db
    networks:
      - app_network
    develop:
      # Create a `watch` configuration to update the appl
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: ./backend
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/
        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: backend/pyproject.toml
  frontend:
    # Build the image from the Dockerfile in the current directory
    build: 
      context: ./frontend
    # Host the FastAPI application on port 8000
    ports:
      - "3000:3000"
    # Interactive shell container
    stdin_open: true
    tty: true
    environment:
      - WDS_SOCKET_HOST=127.0.0.1 
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true 
    command: npm run start
    develop:
      # Create a `watch` configuration to update the appl
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: ./frontend
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/
        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: frontend/package-lock.json
  app_db:
    container_name: app_db
    hostname: app_db
    image: library/postgres:16.3
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=app
    volumes:
      - app_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
volumes:
  app_db_data:
    driver: "local"
networks:
  app_network:
    driver: bridge